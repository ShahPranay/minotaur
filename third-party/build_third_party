#!/bin/bash

#
# Fetches externals and compiles externals.
#

usage () 
{
   echo ""
   echo -n "This is a script to download source-code of all open-source "
   echo -n "third-party libraries and build them. Architecture appropriate "
   echo -n "FilterSQP and BQPD libraries (without source code are downloaded."
   echo ""
   echo -n "System requirements:"
   echo "pkgconfig, c++ compiler, gfortran must be available for this to work."
   echo ""
   echo "usage: ./build_third_party [-j {num-cpus}] [-l {log-file}] [-r {error-file}] [-t {url}] [-COs]"
   echo ""
   echo "-b: Install blas and lapack"
   echo "-c: cplex options"
   echo "-C: Use curl instead of wget to fetch externals."
   echo "-d: Do not download the tar file and use previously downloaded one."
   echo "-f: Do not install FilterSQP and BQPD."
   echo "-g: gurobi options"
   echo "-h: Show help."
   echo "-i: Do not install ipopt."
   echo "-j: Number of CPUs to use for compiling."
   echo "-l: Full path to log file. Default is stdout."
   echo "-O: Use Mac-OS specific compile flags."
   echo "-r: Full path to error file. Default is stderr."
   echo "-s: Build static libraries."
   echo "-t: URL of minotaur-third-party-src.tar.gz"
   echo ""
   echo -n "typical usage: ./build_third_party"
   echo -n " -j 8"
   echo ""
}

err ()
{
  echo ${1}
  exit 1
}

TARNAME="minotaur-0.4-third-party-src"
TARURL=http://www.ieor.iitb.ac.in/files/faculty/amahajan/minotaur/third-party/${TARNAME}.tar.gz

ASL="asl-2473f4e"
BQPD="bqpd-3"
#CBC="cbc-2.10.2"
CLP="clp-1.17.9"
CPPUNIT="cppunit-1.15.1"
FILTER="filter-102"
IPOPT="ipopt-3.14.13"
MUMPS="mumps-3.0.5"
LAPACK="lapack-3.12.0"
OSI="osi-0.108.6"
SNAME=${TARNAME}

LOG=
ERR=
CPUS=1

## read arguments
## we use getopts instead of getopt because the former is portable. Latter
## supports long options but is not portable.

DL_TAR=1          ## whether to download the tar file
ENABLE_STATIC=0
STATIC_ARGS=
USE_CURL=0
USE_MAC=0
LAPACK_COMP=0
LAPACK_FLAGS=( )
MAC_ARGS=
WIN=0

while getopts "bc:Cdfg:hij:l:Or:st:w" flag
do
  case ${flag} in
    b) LAPACK_COMP=1 ;;
    c) CPX_OPT=${OPTARG} ;;
    C) USE_CURL=1 ;;
    d) DL_TAR=0 ;;
    f) FILTER= ;;
    g) GRB_OPT=${OPTARG} ;;
    h) usage; exit 1;;
    i) IPOPT= ;;
    j) CPUS=${OPTARG} ;;
    l) LOG=${OPTARG} ;;
    O) USE_MAC=1 ;;
    r) ERR=${OPTARG} ;;
    s) ENABLE_STATIC=1 ;;
    t) TARURL=${OPTARG} ;;
    w) WIN=1 ;;
    *) echo>&2 "invalid option ${flag}"; usage; exit 1;;
  esac
done

if [ "x${LOG}" != "x" ]
then
  exec 1>>${LOG}
fi
if [ "x${ERR}" != "x" ]
then
  exec 2>>${ERR}
fi

if [ "${ENABLE_STATIC}" == "1" ]
then
  STATIC_ARGS="--disable-shared --enable-static"
fi


## if [ "${USE_MAC}" == "1" ]
## then
##   MAC_ARGS="ADD_FFLAGS=-mmacosx-version-min=10.4"
## fi

if [ "${DL_TAR}" == "1" ]
then
  if [ "${USE_CURL}" == "1" ]
  then
    curl -o ${TARNAME}.tar.gz ${TARURL}
  else
    wget -N ${TARURL}
  fi
  
  if [[ ! -f ${TARNAME}.tar.gz ]]
  then
  	err "${TARNAME} not found. Aborting."
  fi
else
  echo "Not downloading ${TARNAME}.tar.gz "
fi

echo -n "extracting third-party src ... "
tar -zxf ${TARNAME}.tar.gz || err "error extracting from ${TARNAME}.tar.gz"

  
TPROOT=`pwd`
echo "third-party libraries will be installed in ${TPROOT}"
mkdir lib ||  err "lib directory already exists, run clean_third_party first"
mkdir include ||  err "include directory already exists, run clean_third_party first"

echo "compiling ASL"
cd ${TPROOT}/${SNAME}/${ASL}/src/solvers/
chmod a+rx configurehere  
./configurehere
make -j ${CPUS}
cp amplsolver.a ${TPROOT}/lib
mkdir -p ${TPROOT}/include/asl
cp -t ${TPROOT}/include/asl/ *.h opcode.hd 
cd ${TPROOT}

echo "compiling CLP"
CLP_DIR=${TPROOT}/${SNAME}/${CLP}
cd $CLP_DIR
for dir in CoinUtils Osi Clp 
do
        mkdir -p $CLP_DIR/build/$dir
        echo -n $dir" " >> $CLP_DIR/build/coin_subdirs.txt
        cd $CLP_DIR/build/$dir
        $CLP_DIR/$dir/$dir/configure ${STATIC_ARGS} ${MAC_ARGS} --disable-dependency-tracking --with-coin-instdir=${TPROOT} --prefix=${TPROOT}
	make -j ${CPUS} install
done


echo "compiling CPPUNIT"
cd ${TPROOT}/${SNAME}/${CPPUNIT}
rm -rf build
mkdir -p build  
cd build
../configure --prefix=${TPROOT} --enable-doxygen=no ${STATIC_ARGS}
make -j ${CPUS} && make -j ${CPUS} install
cd ${TPROOT}

if [ "x${FILTER}" == "x" ]
then
	echo "not copying FilterSQP and BQPD"
else
	echo "copying FilterSQP and BQPD"
	cp ${TPROOT}/${SNAME}/${FILTER}/libfiltersqp.a ${TPROOT}/lib/
	cp ${TPROOT}/${SNAME}/${BQPD}/libbqpd.a ${TPROOT}/lib/
fi

if [ "${LAPACK_COMP}" == "1" ]
then
  echo "compiling LAPACK"
  cd ${TPROOT}/${SNAME}/${LAPACK}
  rm -rf build
  mkdir -p build  
  cd build
  if [ "${WIN}" == "1" ]
  then
    WIN_FLAGS=(-G "MSYS Makefiles")
  fi
  if [ "${ENABLE_STATIC}" == "1" ]
  then
    cmake -DCMAKE_INSTALL_PREFIX:PATH=${TPROOT} -DBUILD_SHARED_LIBS:BOOL=OFF -DBUILD_TESTING:BOOL=OFF "${WIN_FLAGS[@]}" ..
  else
    cmake -DCMAKE_INSTALL_PREFIX:PATH=${TPROOT} -DBUILD_SHARED_LIBS:BOOL=ON -DBUILD_TESTING:BOOL=OFF "${WIN_FLAGS[@]}" ..
  fi
  make -j ${CPUS} && make -j ${CPUS} install
  LAPACK_FLAGS=(--with-lapack="-L${TPROOT}/lib -llapack -lblas -lgfortran")
else
  echo "not compiling LAPACK"
fi
cd ${TPROOT}



if [ "x${IPOPT}" == "x" ]
then
  echo "not compiling IPOPT and MUMPS"
else
  echo "compiling MUMPS"
  mkdir -p ${TPROOT}/${SNAME}/${MUMPS}/build
  cd ${TPROOT}/${SNAME}/${MUMPS}/build
  ${TPROOT}/${SNAME}/${MUMPS}/configure --without-metis --disable-openmp ${STATIC_ARGS} ${MAC_ARGS} --disable-dependency-tracking --prefix=${TPROOT} "${LAPACK_FLAGS[@]}"
  # parallel compile may not work here
  make install -j 1   
  cd ${TPROOT}

  echo "compiling IPOPT"
  mkdir -p ${TPROOT}/${SNAME}/${IPOPT}/build
  cd ${TPROOT}/${SNAME}/${IPOPT}/build
  ${TPROOT}/${SNAME}/${IPOPT}/configure --without-metis --disable-openmp ${STATIC_ARGS} ${MAC_ARGS} --disable-dependency-tracking --prefix=${TPROOT} "${LAPACK_FLAGS[@]}"
  make install -j ${CPUS}
  cd ${TPROOT}
fi

if [ "x${CPX_OPT}${GRB_OPT}" == "x" ]
then
  echo "not compiling OsiCpx and OsiGrb"
else
  if [ "x${CPX_OPT}" == "x" ]
  then
    echo "not compiling OsiCpx"
  else
    echo "compiling OsiCpx"
  fi

  if [ "x${GRB_OPT}" == "x" ]
  then
    echo "not compiling OsiGrb"
  else
    echo "compiling OsiGrb"
  fi

  echo CPX_OPT ${CPX_OPT}
  cd ${TPROOT}/${SNAME}/${OSI}
  rm -rf build
  mkdir -p build  
  cd build
  echo ${CPX_OPT} ${GRB_OPT} --prefix ${TPROOT} | xargs ../configure 
  make -j ${CPUS} install
fi
cd ${TPROOT}

